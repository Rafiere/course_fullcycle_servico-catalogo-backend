buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-mysql:8.5.13' //Durante todos os scripts de build, o Gradle irá baixar a dependência do Flyway.
    }
}

plugins {
    id 'java'
    id 'application' //Esse plugin permite que executemos esse módulo como um aplicativo Java.
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' //Esse plugin permite que o Spring gerencie as dependências, para que não tenhamos que lidar com elas manualmente.
    id 'org.flywaydb.flyway' version '8.5.13' //Estamos adicionando o "plugin" do Flyway. É esse plugin que adicionará algumas novas "tasks" ao Gradle.
}

group = 'com.projetopraticobackend.servicocatalogo.infrastructure'
version = '0.0.1'

/* Se não configurarmos essa task, o Gradle gerará o ".jar" dentro do módulo infrastructure, porém, ao
* configurarmos essa task com o diretório abaixo, geraremos o diretório "build" com o ".jar" na raiz da aplicação. */
bootJar {
    archiveFileName.set("application.jar")
    destinationDirectory.set(file("${rootProject.buildDir}/libs"))
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(':domain')) //Estamos dizendo que a infraestrutura depende do domínio, assim, ela pode usar as classes do domínio.
    implementation(project(':application')) //Estamos dizendo que a infraestrutura depende da aplicação, assim, ela pode usar as classes da aplicação.

    implementation('mysql:mysql-connector-java') //Um driver é a implementçaão, através do Java, para permitir a comunicação com o banco de dados.


    //Por padrão, o Spring usa o "Tomcat" em container, porém, o Tomcat deixa um pouco
    //a desejar, por causa disso, utilizaremos a versão do "JBoss" em container, que é
    //chamada de Undertow.
    implementation('org.springframework.boot:spring-boot-starter-web'){
        exclude module: 'spring-boot-starter-tomcat'
    }

    implementation('org.springframework.boot:spring-boot-starter-undertow') //Estamos adicionando o "Undertow" ao projeto.
    implementation('org.springframework.boot:spring-boot-starter-data-jpa') //Estamos adicionando o "Spring Data JPA" ao projeto.

    testImplementation('org.flywaydb:flyway-core') //Estamos adicionando as migrations do Flyway nos testes. Assim, as migrações serão executadas para os testes.
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    testRuntimeOnly('com.h2database:h2')
}

flyway { //Se vamos executar alguma migração local, o Flyway utilizará as configurações abaixo. Caso contrário, se for executado em um ambiente de produção, ele utilizará as variáveis de ambiente, que deverão ser definidas.
    url = System.getenv('FLYWAY_DB') ?: 'jdbc:mysql://localhost:3306/adm_videos' //Se a variável de ambiente não estiver preenchida, será usado um valor default.
    user = System.getenv('FLYWAY_USER') ?: 'admin'
    password = System.getenv('FLYWAY_PASSWORD') ?: 'admin'
}

test {
    useJUnitPlatform()
}